#!/usr/bin/python
"""
Command line script for plotting time-resolved photoelectron spectra from
theoretical or experimental data.

Input:
    seed_files: str or list of str. The location of files with format:
        time  traj  pop  DeltaE0  Dys0  DeltaE1  Dys1 ...
    tinc: int or float. The time increment in au (set by getgeoms).
    nebins: int. The number of bins from emin to emax.
    eprobe: float. The probe energy in eV.
    emin: float. The minimum energy of the plot in eV.
    emax: float. The maximum energy of the plot in eV.
    tmin: float. The minimum time of the plot in fs.
    tmax: float. The maximum time of the plot in fs.
    esig: float. The energy Gaussian convolution sigma in eV.
    tsig: float. The time Gaussian convolution sigma in fs.
    dyson_norms: bool. Whether spectral intensities are weighted by Dyson
        orbital norms. Default is True.
    renorm_spec: bool. Whether the maximum of the spectrum is normalized
        to unity. Default is True.
    calc_err: bool. Whether the bootstrap error should be calculated.
    n_bootstrap: int. Maximum number of bootstrap iterations.
    boot_thrsh: float. The minimum intensity difference for bootstrapping.
    data_name: str. Name of a 2D data file for outputs.
    err_name: str. Name of a 2D data file for boostrap errors.
    plot_name: str. Name of the output plot.
    err_plot_name: str. Name of the error output plot.

Output:
    [data_name]: The data file containing intensities for all amplitudes
        and times.
    [err_name]: The bootstrap error for intensities at all amplitudes
        and times. Only written if calc_err = True.
    [plot_name]: The TRPES plot.
    [err_plot_name]: The TRPES error plot.
"""
import numpy as np
from scipy.ndimage.filters import gaussian_filter
from fmsinterpreter import default
from fmsinterpreter import fileio
from fmsinterpreter import populations
from fmsinterpreter import plot


def main():
    inp = default.trpesplot
    fileio.cfg_update(inp, default.inpname['trpesplot'])

    au2fs = 0.02418843

    fnames = fileio.get_fnames(inp['seed_files'])
    nseed = len(fnames)

    ebins = np.linspace(inp['emin'] - 3*inp['esig'],
                        inp['emax'] + 3*inp['esig'], inp['nebins'])
    tstrt = inp['tinc']*round((inp['tmin'] - 3*inp['tsig'])/(au2fs*inp['tinc']))
    tbins = np.arange(tstrt, (inp['tmax'] + 3*inp['tsig'])/au2fs + inp['tinc'],
                      inp['tinc']) - inp['tinc'] // 2
    ecent = (ebins[1:] + ebins[:-1]) / 2
    tcent = au2fs*(tbins[1:] + tbins[:-1]) / 2
    sigma = (inp['tsig'] / (au2fs*(tbins[1]-tbins[0])),
             inp['esig'] / (ebins[1]-ebins[0]))
    spec = np.empty((nseed, len(tbins)-1, len(ebins)-1))

    for i, fn in enumerate(fnames):
        rawdat = np.genfromtxt(fn).T
        nd = (len(rawdat) - 3) // 2
        times = np.tile(rawdat[0], nd)
        energies = rawdat[3::2].flatten()
        if inp['dyson_norms']:
            wgts = (rawdat[2] * rawdat[4::2]).flatten()
        else:
            wgts = np.tile(rawdat[2], nd)

        stick = np.histogram2d(times, inp['eprobe'] - energies,
                               bins=(tbins, ebins), weights=wgts)[0]
        spec[i] = gaussian_filter(stick, sigma=sigma)

    total_spec = np.average(spec, axis=0)
    emask = np.logical_and(ecent >= inp['emin'], ecent <= inp['emax'])
    tmask = np.logical_and(tcent >= inp['tmin'], tcent <= inp['tmax'])
    if inp['renorm_spec']:
        scale = np.max(total_spec[np.ix_(tmask, emask)])
        print('Renormalizing spectrum with max = {:.4e}'.format(scale))
    else:
        scale = 1

    total_spec /= scale
    kwargs = dict(xlabel='Kinetic Energy / eV', ylabel='Time / fs',
                  xlim=(inp['emin'], inp['emax']),
                  ylim=(inp['tmin'], inp['tmax']))
    header = np.hstack((0, ecent))

    if inp['calc_err']:
        spec /= scale
        total_spec, total_err = populations.error_amps(spec,
                                                       nboot=inp['n_bootstrap'],
                                                       bthrsh=inp['boot_thrsh'])

        data = np.vstack((tcent, 100*total_err.T)).T
        fileio.write_dat(inp['err_name'], np.vstack((header, data)),
                         charwid=10)
        if inp['err_plot_name'] is not None:
            vmax = np.max(total_err[np.ix_(tmask, emask)])
            total_err[total_err > vmax] = 0
            fig, ax = plot.contourf(ecent, tcent, total_err, **kwargs)
            plot.save(inp['err_plot_name'])

    data = np.vstack((tcent, 100*total_spec.T)).T
    fileio.write_dat(inp['data_name'], np.vstack((header, data)),
                     charwid=10)

    if inp['plot_name'] is not None:
        #fig, ax = plot.heatmap(ebins, tbins, total_spec, **kwargs)
        fig, ax = plot.contourf(ecent, tcent, total_spec, vmax=1, **kwargs)
        plot.save(inp['plot_name'])


if __name__ == '__main__':
    main()
