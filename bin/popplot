#!/usr/bin/env python
"""
Command line script for getting and plotting adiabatic populations.

Input:
    states: list of int. The adiabatic state indices for states to plot.
    fms_time_increment: float. The increment between data points in
        unconverted units (i.e. a.u.). Must be larger than the FMS
        minimum time increment.
    time_conv: float. The conversion factor by which all times are
        multiplied.
    tmin: float. The minimum time used in the plot or fit.
    tmax: float. The maximum time used in the plot or fit.
    directory_stem: str or list of str. The seed directories used to
        find the total number of seeds. Can use regular expressions
        recognized by glob.
    trajectory_files: str or list of str. The trajectory filenames
        containing population information. Can use regular expressions
        recognized by glob.
    amplitude_data_name: str. The filename for the amplitude vs. time
        raw text data.
    amplitude_plot_name: str. The filename for the amplitude plot.
    fit_function: str. The name of the function used to fit the
        amplitudes (exp, biexp, triexp).
    p0: list of int. Initial guesses used for fitting (2 for exp, 6 for
        biexp, 9 for triexp).
    fit_data_name: str. The filename for raw-text information on the
        fit parameters.
    fit_plot_name: str. The filename for the fit plot and its corresponding
        raw data.

Output:
    [amplitude_data_name]: The raw text data of total adiabatic amplitudes
        vs. time.
    [amplitude_plot_name]: A matplotlib-generated graphics file of the
        desired population plot (only if amplitude_plot_name is not None).
    [fit_data_name]: A raw text file of fit parameters (only if fit_function
        is not None).
    [fit_plot_name]: A matplot-generate graphics file of the fit population
        plot and the raw data for comparison (only if both fit_function
        and fit_plot_name are not None).
"""
import os
import numpy as np
from fmsinterpreter import populations
from fmsinterpreter import fileio
from fmsinterpreter import default
from fmsinterpreter import plot


def main():
    """The main population plot routine."""
    inp = default.popplot
    fileio.cfg_update(inp, default.inpname['popplot'])

    # get number of seeds
    nseed = len(fileio.get_fnames(inp['directory_stem']))

    # get trajectory filenames
    traj_fnames = fileio.get_fnames(inp['trajectory_files'])

    # set up time range
    time = np.arange(inp['tmin']/inp['time_conv'],
                     inp['tmax']/inp['time_conv'] + inp['fms_time_increment'],
                     inp['fms_time_increment'])

    # read the amplitudes
    tj_amps, tj_info = populations.read_amps(traj_fnames, time, inp['states'],
                                             aconv=1./nseed)
    amplitude = populations.total_amps(tj_amps, tj_info[:,2])

    # write to a data file
    fileio.write_dat(inp['amplitude_data_name'],
                     np.vstack((time * inp['time_conv'], amplitude)).T,
                     labels=['Time/fs'] + ['S'+str(i) for i in inp['states']])

    # fit the amplitudes
    if inp['fit_function'] is not None:
        ff = inp['fit_function']
        examp = 1 - amplitude[0]
        examp = (examp - min(examp)) / (max(examp) - min(examp))
        opt, err = populations.fit_function(ff, time, examp, inp['p0'],
                                            tconv=inp['time_conv'])
        populations.write_fit(ff, opt, err, inp['fit_data_name'])
        if inp['fit_plot_name'] is not None:
            t = time*inp['time_conv']
            decay = np.array([examp, getattr(populations, ff)(t, *opt)])
            fig, ax = plot.lineplot(t, decay.T, xlabel='Time / fs',
                                    ylabel='1-S0 Amplitude',
                                    xlim=(min(t), max(t)), ylim=(0,1),
                                    legend=['raw data', ff+' fit'])
            plot.save(inp['fit_plot_name'], figure=fig)

    # plot the amplitudes
    if inp['amplitude_plot_name'] is not None:
        labels = ['S'+str(i) for i in inp['states']]
        fig, ax = plot.lineplot(time*inp['time_conv'], amplitude.T,
                                xlabel='Time / fs',
                                ylabel='Adiabatic population',
                                xlim='range', ylim=(0,1),
                                legend=labels)
        plot.save(inp['amplitude_plot_name'], figure=fig)


if __name__ == '__main__':
    main()
