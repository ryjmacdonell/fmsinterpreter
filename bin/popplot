#!/usr/bin/env python
"""
Command line script for getting and plotting adiabatic populations.
"""
import os
import numpy as np
from fmsinterpreter import populations
from fmsinterpreter import fileio
from fmsinterpreter import default
from fmsinterpreter import plot


def main():
    """The main population plot routine."""
    inp = default.popplot
    fileio.cfg_update(inp, default.inpname['popplot'])

    # get number of seeds
    nseed = len(fileio.get_fnames(inp['directory_stem']))

    # get trajectory filenames
    traj_fnames = fileio.get_fnames(inp['trajectory_files'])

    # set up time range
    time = np.arange(inp['tmin']/inp['time_conv'],
                     inp['tmax']/inp['time_conv'] + inp['fms_time_increment'],
                     inp['fms_time_increment'])

    # read the amplitudes
    amplitude = populations.read_amps(traj_fnames, time, inp['states']) / nseed

    # write to a data file
    fileio.write_dat(inp['amplitude_data_name'],
                     np.vstack((time * inp['time_conv'], amplitude)).T,
                     labels=['Time/fs'] + ['S'+str(i) for i in inp['states']])

    # fit the amplitudes
    if inp['fit_function'] is not None:
        ff = inp['fit_function']
        examp = 1 - amplitude[0]
        examp = (examp - min(examp)) / (max(examp) - min(examp))
        opt, err = populations.fit_function(ff, time, examp, inp['p0'],
                                            tconv=inp['time_conv'])
        populations.write_fit(ff, opt, err, inp['fit_data_name'])
        if inp['fit_plot_name'] is not None:
            t = time*inp['time_conv']
            decay = np.array([examp, getattr(populations, ff)(t, *opt)])
            fig, ax = plot.lineplot(t, decay.T, xlabel='Time / fs',
                                    ylabel='1-S0 Amplitude',
                                    xlim=(min(t), max(t)), ylim=(0,1),
                                    legend=['raw data', ff+' fit'])
            fig.savefig(inp['fit_plot_name'], bbox_inches='tight')

    # plot the amplitudes
    if inp['amplitude_plot_name'] is not None:
        labels = ['S'+str(i) for i in inp['states']]
        fig, ax = plot.lineplot(time*inp['time_conv'], amplitude.T,
                                xlabel='Time / fs',
                                ylabel='Adiabatic population',
                                xlim='range', ylim=(0,1),
                                legend=labels)
        fig.savefig(inp['amplitude_plot_name'], bbox_inches='tight')


if __name__ == '__main__':
    main()
