#!/usr/bin/env python
"""
Command line script for getting and plotting adiabatic populations.

Input:
    states: list of int. The adiabatic state indices for states to plot.
    fms_time_increment: float. The increment between data points in
        unconverted units (i.e. a.u.). Must be larger than the FMS
        minimum time increment.
    time_conv: float. The conversion factor by which all times are
        multiplied.
    tmin: float. The minimum time used in the plot or fit.
    tmax: float. The maximum time used in the plot or fit.
    ndat_files: str or list of str. The data filenames containing
        population information. Can use regular expressions recognized
        by glob.
    calc_err: bool. Whether or not bootstrap errors should be
        calculated and plotted/written to a file.
    n_bootstrap: int. The maximum number of bootstrap iterations to be
        performed in order to determine errors.
    boot_thrsh: float. The smallest difference between mean and bootstrap
        mean to achieve convergence.
    amplitude_data_name: str. The filename for the amplitude vs. time
        raw text data.
    amplitude_err_name: str. The filename for the boostrap error vs.
        time raw text data.
    plot_name: str. The filename for the amplitude plot.
    fit_function: str. The name of the function used to fit the
        amplitudes. If the number of adiabatic states is greater than
        the number of fit states, the highest state populations are treated
        as a sum. See the fitting module for allowed function names.
    p0: list of int. Initial guesses used for fitting (2 for exp, 6 for
        biexp, 9 for triexp).
    err_thrsh: float. The minimum error value for fitting, used to avoid
        over-fitting zero error points.
    fit_data_name: str. The filename for raw-text information on the
        fit parameters.
    plot_fit: bool. Whether or not the fit function will be plotted with
        the amplitudes.

Output:
    [amplitude_data_name]: The raw text data of total adiabatic amplitudes
        vs. time.
    [amplitude_err_name]: The raw text file containing bootstrap errors on
        total adiabatic amplitudes vs. time.
    [plot_name]: A matplotlib-generated graphics file of the desired
        population plot (only if fit_function is not None and
        plot_name is True).
    [fit_data_name]: A raw text file of fit parameters (only if fit_function
        is not None).
"""
import os
import numpy as np
from fmsinterpreter import populations
from fmsinterpreter import fileio
from fmsinterpreter import default
from fmsinterpreter import plot


def main():
    """The main population plot routine."""
    inp = default.popplot
    fileio.cfg_update(inp, default.inpname['popplot'])

    # get n.dat filenames and number of seeds
    ndat_fnames = fileio.get_fnames(inp['ndat_files'])
    nseed = len(ndat_fnames)

    # set up time range
    time = np.arange(inp['tmin']/inp['time_conv'],
                     inp['tmax']/inp['time_conv'] + inp['fms_time_increment'],
                     inp['fms_time_increment'])

    # read the amplitudes
    ns = max(inp['states']) + 1
    amplitude = populations.total_amps(ndat_fnames, time, ns)

    # calculate bootstrap error
    if inp['calc_err']:
        amplitude, aerr = populations.error_amps(amplitude,
                                                 nboot=inp['n_bootstrap'],
                                                 bthrsh=inp['boot_thrsh'])
        aerrT = aerr.T
    else:
        amplitude = np.average(amplitude, axis=0)
        aerrT = None

    # write to a data file
    t = time * inp['time_conv']
    fileio.write_dat(inp['amplitude_data_name'], np.vstack((t, amplitude)).T,
                     labels=['Time/fs'] + ['S'+str(i) for i in inp['states']])
    if inp['calc_err']:
        fileio.write_dat(inp['amplitude_err_name'], np.vstack((t, aerr)).T,
                         labels=['Time/fs'] + ['S'+str(i) for i in inp['states']],
                         fmttyp='e')

    # fit the amplitudes
    if inp['fit_function'] is not None:
        ff = populations.import_func(inp['fit_function'])
        kwargs = dict(ethrsh = inp['err_thrsh'])
        if inp['calc_err']:
            kwargs['err'] = aerr

        opt, err = populations.fit_function(ff, t, amplitude, inp['p0'], **kwargs)
        populations.write_fit(inp['fit_function'], opt, err, inp['fit_data_name'])

    # plot the amplitudes
    if inp['plot_name'] is not None:
        labels = ['$S_{:d}$'.format(i) for i in inp['states']]
        fig, ax = plot.lineplot(t, amplitude.T, err=aerrT, xlabel='Time / fs',
                                ylabel='Adiabatic population',
                                xlim='range', ylim=(0,1), legend=labels)
        # plot the fit functions for comparison
        if inp['fit_function'] is not None and inp['plot_fit']:
            ax.set_prop_cycle(None)
            ax.plot(t, ff(t, *opt).T, linestyle='--')

        plot.save(inp['plot_name'], figure=fig)


if __name__ == '__main__':
    main()
