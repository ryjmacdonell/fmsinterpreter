#!/usr/bin/python
"""
Command line script for making scatter plots of two internal coordinates.

Input:
    states: list of ints, length 2. Defines the initial and final states
        for computing the branching ratio.
    geoms: str or list of str. The geometry files used to measure
        internal coordinates.
    xcoord: str. The x coordinate type, as specified in geomtools.displacement
        and geomtools.molecule.
    ycoord: str. The y coordinate type, as specified in geomtools.displacement
        and geomtools.molecule.
    xinds: list of int. The atomic indices for the x coordinate.
    yinds: list of int. The atomic indices for the y coordinate.
    xunits: str. The x coordinate units as specified in geomtools.cons.
    yunits: str. The y coordinate units as specified in geomtools.cons.
    xlabel: str. The x coordinate label in the scatter plot.
    ylabel: str. The y coordinate label in the scatter plot.
    data_name: str. The filename of the output data file.
    plot_name: str. The filename of the generated scatter plot.

Output:
    [data_name]: A raw-text file containing the coordinate values used
        to plot each point in the plot.
    [plot_name]: A matplotlib-generated graphics file with the desired
        scatter plot.
"""
import numpy as np
from geomtools import molecule
from fmsinterpreter import fileio
from fmsinterpreter import default
from fmsinterpreter import branching
from fmsinterpreter import plot


def main():
    inp = default.scatterplot
    fileio.cfg_update(inp, default.inpname['scatterplot'])

    # get spawn filenames
    fnames = fileio.get_fnames(inp['geoms'])

    # import geometries
    all_geoms = molecule.import_bundle(fnames, hascom=True)
    branching.trim_states(all_geoms, inp['states'])

    # get coordinates
    x = all_geoms.get_coord(inp['xcoord'], inp['xinds'], units=inp['xunits'])
    y = all_geoms.get_coord(inp['ycoord'], inp['yinds'], units=inp['yunits'])

    # get populations
    #pop = ?

    # write to a data file
    fileio.write_dat(inp['data_name'], np.vstack((x, y)).T,
                     labels=[inp['xlabel'], inp['ylabel']])

    # make a scatter plot
    fig, ax = plot.scatter(x, y, xlabel=inp['xlabel'], ylabel=inp['ylabel'])
    plot.save(inp['plot_name'])


if __name__ == '__main__':
    main()
