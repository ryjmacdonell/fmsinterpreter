#!/usr/bin/env python
"""
Command line script for plotting critical points on the potential energy
surface.

Input:
    states: list of int. The state indices for states to be plotted.
    infname: str. The filename of the input file, with each line containing
        the geometry label followed by the state energies in increasing
        order.
    plotorder: list of int. The order in which to plot the geometries in
        [infname].
    gwid: float. The width of each geometry bar in the plot.
    gsep: float. The separation between geometry bars in the plot.
    lblrot: float. The rotation angle (in degrees) of geometry labels
        in the plot.
    maxener: float. The maximum energy (in converted units) for the plot.
    minener: float. The minimum energy (in converted units) for the plot.
    econv: float. The conversion factor with which energies are multiplied.
    plot_name: str. The file name for the PES plot.
    show_grid: bool. Determines whether to show the energy grid lines.

Output:
    [plot_name]: A matplotlib-generated graphics file with the desired
        potential energy surface plot.
"""
import os
from fmsinterpreter import fileio
from fmsinterpreter import potentials
from fmsinterpreter import default
from fmsinterpreter import plot


def main():
    """The main pesplot routine."""
    # read in the input file
    inp = default.pesplot
    fileio.cfg_update(inp, default.inpname['pesplot'])

    # read in the energy data
    energies, labels = fileio.read_dat(inp['infname'], skipcol=1, labels='col')

    # reorder indices and convert energies
    labels, energies = potentials.conv_nrg(labels, energies,
                                           order=inp['plotorder'],
                                           conv=inp['econv'],
                                           base=inp['minener'])

    # plot the potential energy surface points
    fig, ax = plot.energyplot(labels, energies, wid=inp['gwid'],
                              sep=inp['gsep'], rot=inp['lblrot'],
                              maxe=inp['maxener'], grid=inp['show_grid'])
    plot.save(inp['plot_name'])


if __name__ == '__main__':
    main()
