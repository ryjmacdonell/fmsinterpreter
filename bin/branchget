#!/usr/bin/env python
"""
Command line script for matching a set of spawn geometries to a set of
reference geometries and outputting geometries and branching ratios.

Input:
    states: list of int, len 2. Defines the initial and final states
        for computing the branching ratio.
    ref_geoms: str or list of str. Gives the filenames of reference
        geometries. May contain regular expressions recognized by glob.
    invert: bool. Sets whether or not reflected geometries are compared to
        the reference in asymmetric or chiral molecules.
    permute: 1d or 2d list of int. Sets the (1-ordered) atomic indices to
        be permuted. Suggested atoms are at symmetric rotating centres or
        possible migrating atoms (usually hydrogens).
    test_geoms: str or list of str. Gives filenames of geometries to
        test. May contain regular expressions recognized by glob.

Output:
    branch_s[x]s[y]/: Directory for geometries corresponding to spawning
        from state x to state y. Contains the files below.
    branch.dat: Summary of the percent population passing in the region of
        a given reference geometry. Given by labels in filenames.
    [ref_geoms]: XYZ files, each containing all geometries matched to a
        given reference.
"""
import os
import numpy as np
from geomtools import molecule
from geomtools import kabsch
from fmsinterpreter import fileio
from fmsinterpreter import branching
from fmsinterpreter import default


def main():
    """The main getbranch routine."""
    # read in inputs and set defaults
    inp = default.branchget
    fileio.cfg_update(inp, default.inpname['branchget'])

    # get reference filenames
    ref_fnames = fileio.get_fnames(inp['ref_geoms'])

    # get test filenames
    test_fnames = fileio.get_fnames(inp['test_geoms'])

    # match tests onto refs
    matched = branching.branching(ref_fnames, test_fnames, inp['states'])

    outdir = 'branch_s{:d}s{:d}'.format(*inp['states'])
    if not os.path.exists(outdir):
        os.makedirs(outdir)
    else:
        for fname in os.listdir(outdir):
            os.remove(outdir+'/'+fname)
    # write summary file
    # output matched geometries
    for bundle, fname in zip(matched, ref_fnames):
        if bundle.get_nmol() > 0:
            bundle.write(outdir+'/'+fname)


if __name__ == '__main__':
    main()
